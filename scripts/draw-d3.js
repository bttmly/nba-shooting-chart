// Generated by CoffeeScript 1.7.1
(function() {
  window.App || (window.App = {});

  App.drawD3 = function(shots) {
    var binPct, binned, binnedInfo, countRange, counts, expPts, expPtsRange, height, hexRadius, hexagon, hexbin, rainbow, sizeScale, svg, threshold, width, xRange, xScale, xVals, yRange, yScale, yVals;
    width = 1000;
    height = 940;
    hexRadius = 23;
    threshold = 30;
    xVals = _.pluck(shots, "x");
    yVals = _.pluck(shots, "y");
    xRange = [xVals.min(), xVals.max()];
    yRange = [yVals.min(), yVals.max()];
    xScale = d3.scale.linear().domain(xRange).range([0, width]);
    yScale = d3.scale.linear().domain([yRange[0], 940]).range([0, height * 2]);
    shots = shots.map(function(shot) {
      shot.scaledX = xScale(shot.x);
      shot.scaledY = yScale(shot.y);
      return shot;
    });
    hexbin = d3.hexbin().size([width, height]).radius(hexRadius).x(function(d) {
      return d.scaledX;
    }).y(function(d) {
      return d.scaledY;
    });
    binned = hexbin(shots);
    binnedInfo = binned.map(function(b) {
      var o;
      o = {};
      o.l = b.length;
      o.p = (b.filter(function(e) {
        return e.m;
      })).length / b.length;
      o.v = b[0].v;
      o.e = o.p * o.v;
      return o;
    });
    counts = _.pluck(binnedInfo, "l");
    countRange = [counts.min(), counts.max()];
    expPts = binnedInfo.filter(function(b) {
      return b.l > 20;
    }).map(function(b) {
      return b.e;
    });
    expPtsRange = [expPts.min(), expPts.max()];
    console.log(expPts);
    rainbow = new Rainbow();
    rainbow.setSpectrum('#3498db', '#2ecc71', '#f1c40f', '#e67e22', '#e74c3c');
    rainbow.setNumberRange(expPtsRange[0], expPtsRange[1]);
    sizeScale = d3.scale.log().domain([threshold, countRange[1]]).range([0, 1]);
    svg = d3.select("body").append("svg").attr("width", width).attr("height", height);
    binPct = function(bin) {
      return (bin.filter(function(e) {
        return e.m;
      })).length / bin.length;
    };
    return hexagon = svg.append("g").attr("class", "hexagons").selectAll("path").data(binned).enter().append("path").attr("d", hexbin.hexagon(hexRadius - 0.5)).attr("transform", function(d) {
      var scaleAmount;
      scaleAmount = sizeScale(d.length);
      return "translate(" + d.x + ", " + d.y + ") scale(" + scaleAmount + ", " + scaleAmount + ")";
    }).attr("visibility", function(d) {
      if (d.length < threshold) {
        return "hidden";
      } else {
        return "visibile";
      }
    }).style("fill", function(d) {
      return rainbow.colourAt(binPct(d) * d[0].v);
    }).attr("data-percent", function(d) {
      return binPct(d);
    }).attr("data-attempts", function(d) {
      return d.length;
    }).attr("data-value", function(d) {
      return d[0].v;
    });
  };

}).call(this);
