// Generated by CoffeeScript 1.7.1
(function() {
  var TwoDimensionalArray,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TwoDimensionalArray = (function(_super) {
    __extends(TwoDimensionalArray, _super);

    function TwoDimensionalArray(dim1size, dim2size, value) {
      var arr, d1, d2, i, j, oArr, passThru, _i, _j;
      if (value == null) {
        value = "";
      }
      if ((oArr = dim1size) instanceof Array) {
        passThru = true;
      }
      if (passThru) {
        d1 = arr.length;
        d2 = arr[0].length;
      } else {
        d1 = dim1size;
        d2 = dim2size;
      }
      for (i = _i = 0; 0 <= d1 ? _i < d1 : _i > d1; i = 0 <= d1 ? ++_i : --_i) {
        arr = [];
        for (j = _j = 0; 0 <= d2 ? _j < d2 : _j > d2; j = 0 <= d2 ? ++_j : --_j) {
          arr.push((function() {
            if (passThru) {
              return oArr[i][j];
            }
            if (typeof value === "function") {
              return value(i, j);
            } else {
              return value;
            }
          })());
        }
        this.push(arr);
      }
    }

    TwoDimensionalArray.prototype.forEach = function(callback) {
      var i, item, j, row, _i, _j, _len, _len1, _ref;
      for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
        row = this[i];
        _ref = this[0];
        for (j = _j = 0, _len1 = _ref.length; _j < _len1; j = ++_j) {
          item = _ref[j];
          callback(item, i, j, this);
        }
      }
      return this;
    };

    TwoDimensionalArray.prototype.each = function() {
      return this.forEach(arguments);
    };

    TwoDimensionalArray.prototype.map = function(callback) {
      var i, item, j, map, row, _i, _j, _len, _len1;
      map = new TwoDimensionalArray(this.length, this[0].length);
      for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
        row = this[i];
        for (j = _j = 0, _len1 = row.length; _j < _len1; j = ++_j) {
          item = row[j];
          map[i][j] = callback(item, i, j, this);
        }
      }
      return map;
    };

    return TwoDimensionalArray;

  })(Array);

  this.TwoDimensionalArray = TwoDimensionalArray;

}).call(this);
