// Generated by CoffeeScript 1.6.3
_.extend(Backbone.Collection.prototype, {
  getBackboneClass: function() {
    return "Collection";
  },
  pluckUnique: function(attr) {
    return _.uniq(this.pluck(attr));
  },
  collectionFilter: function() {
    var args, constructor;
    constructor = Object.getPrototypeOf(this).constructor;
    args = Array.prototype.slice.call(arguments);
    args.unshift(this.models);
    return new constructor(_.filter.apply(_, args));
  },
  collectionDynamicFilter: function(filterArray) {
    var comparators, constructor, filterObj, results, test, _i, _len;
    constructor = Object.getPrototypeOf(this).constructor;
    comparators = [">", "greaterThan", "<", "lessThan", ">=", "greaterThanOrEqual", "<=", "lessThanOrEqual", "===", "equalTo", "is", "!==", "notEqualTo", "isnt"];
    test = function(post, comparator, value) {
      switch (comparator) {
        case ">" || "greaterThan":
          return post > value;
        case "<" || "lessThan":
          return post < value;
        case ">=" || "greaterThanOrEqual":
          return post >= value;
        case "<=" || "lessThanOrEqual":
          return post <= value;
        case "===" || "equalTo" || "is":
          return post === value;
        case "!==" || "notEqualTo" || "isnt":
          return post !== value;
      }
    };
    results = this.toJSON();
    for (_i = 0, _len = filterArray.length; _i < _len; _i++) {
      filterObj = filterArray[_i];
      console.log(results.length);
      results = results.filter(function(obj) {
        return test(obj[filterObj.prop], filterObj.comparator, filterObj.value);
      });
    }
    console.log(results.length);
    return new constructor(results);
  }
});

_.extend(Backbone.Model.prototype, {
  getBackboneClass: function() {
    return "Model";
  }
});

_.extend(Backbone.View.prototype, {
  getBackboneClass: function() {
    return "View";
  }
});
