// Generated by CoffeeScript 1.7.1
(function() {
  var ajaxFail, ajaxSettings, dfdRoster, retreived;

  window.App || (window.App = {});

  retreived = 0;

  dfdRoster = new $.Deferred;

  ajaxSettings = {
    allTeams: {
      url: "http://stats.nba.com/stats/leaguedashteamstats",
      data: {
        'Season': '2013-14',
        'AllStarSeason': '',
        'SeasonType': 'Regular Season',
        'LeagueID': '00',
        'MeasureType': 'Base',
        'PerMode': 'PerGame',
        'PlusMinus': 'N',
        'PaceAdjust': 'N',
        'Rank': 'N',
        'Outcome': '',
        'Location': '',
        'Month': '0',
        'SeasonSegment': '',
        'DateFrom': '',
        'DateTo': '',
        'OpponentTeamID': '0',
        'VsConference': '',
        'VsDivision': '',
        'GameSegment': '',
        'Period': '0',
        'LastNGames': '0',
        'GameScope': '',
        'PlayerExperience': '',
        'PlayerPosition': '',
        'StarterBench': ''
      }
    },
    eachTeam: {
      url: "http://stats.nba.com/stats/commonteamroster/",
      data: {
        'Season': '2013-14',
        'LeagueID': '00',
        'TeamID': ''
      }
    },
    shotChart: {
      url: "http://stats.nba.com/stats/shotchartdetail",
      data: {
        'Season': '2013-14',
        'SeasonType': 'Regular Season',
        'LeagueID': '00',
        'TeamID': '0',
        'PlayerID': '0',
        'GameID': '',
        'Outcome': '',
        'Location': '',
        'Month': '0',
        'SeasonSegment': '',
        'DateFrom': '',
        'DateTo': '',
        'OpponentTeamID': '0',
        'VsConference': '',
        'VsDivision': '',
        'Position': '',
        'RookieYear': '',
        'GameSegment': '',
        'Period': '0',
        'LastNGames': '0',
        'ContextFilter': '',
        'ContextMeasure': 'FG_PCT',
        'zone-mode': 'basic'
      }
    },
    lineups: {
      url: "http://stats.nba.com/stats/leaguedashlineups",
      data: {
        'Season': '2013-14',
        'SeasonType': 'Regular Season',
        'LeagueID': '00',
        'TeamID': '',
        'MeasureType': 'Base',
        'PerMode': 'PerGame',
        'PlusMinus': 'N',
        'PaceAdjust': 'N',
        'Rank': 'N',
        'Outcome': '',
        'Location': '',
        'Month': '0',
        'SeasonSegment': '',
        'DateFrom': '',
        'DateTo': '',
        'OpponentTeamID': '0',
        'VsConference': '',
        'VsDivision': '',
        'GameSegment': '',
        'Period': '0',
        'LastNGames': '0',
        'GroupQuantity': '5',
        'GameScope': '',
        'PlayerExperience': '',
        'PlayerPosition': '',
        'StarterBench': '',
        'pageNo': '1',
        'rowsPerPage': '0'
      }
    }
  };

  ajaxFail = function(settings, req, status, err) {
    var e;
    e = new Error("Ajax request to " + settings.url + " failed: " + status);
    e.status = status;
    e.req = req;
    e.originalError = err;
    e.ajaxSettings = settings;
    throw e;
  };

  App["static"] || (App["static"] = {});

  App.ajax = {
    getLeagueTeams: function() {
      var settings;
      settings = ajaxSettings.allTeams;
      return $.ajax({
        type: "GET",
        url: settings.url,
        data: settings.data,
        contentType: "application/json",
        dataType: "jsonp"
      }).fail(function(req, status, err) {
        return ajaxFail(settings, req, status, err);
      }).then(function(json) {
        var teams;
        teams = App.util.collectify(json.resultSets[0].headers, json.resultSets[0].rowSet).map(function(t) {
          return App.util.cleanPropNames(t);
        });
        return teams;
      });
    },
    getTeamPlayers: function(id) {
      var req, settings;
      settings = ajaxSettings.eachTeam;
      return req = $.ajax({
        type: "GET",
        url: settings.url,
        data: $.extend({}, settings.data, {
          TeamID: id
        }),
        contentType: "application/json",
        dataType: "jsonp"
      }).fail(function(req, status, err) {
        return ajaxFail(settings, req, status, err);
      }).then(function(json) {
        var players;
        players = App.util.collectify(json.resultSets[0].headers, json.resultSets[0].rowSet).map(function(t) {
          return App.util.cleanPropNames(t);
        });
        return players;
      });
    },
    getPlayerShots: function(id) {
      var settings;
      settings = ajaxSettings.shotChart;
      return $.ajax({
        type: "GET",
        url: settings.url,
        data: $.extend({}, settings.data, {
          PlayerID: id
        }),
        contentType: "application/json",
        dataType: "jsonp"
      }).fail(function(err) {
        return ajaxFail(settings, req, status, err);
      }).then(function(json) {
        var shots;
        shots = App.util.collectify(json.resultSets[0].headers, json.resultSets[0].rowSet).map(function(t) {
          return App.util.cleanPropNames(t);
        });
        return shots;
      });
    }
  };

}).call(this);
