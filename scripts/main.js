// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.NBA = (function() {
    var Lineup, Lineups, Player, Players, Shot, Shots, Team, Teams, responseFlags;
    responseFlags = {
      lineups: false,
      players: false,
      teams: false
    };
    Player = (function(_super) {
      __extends(Player, _super);

      function Player() {
        return Player.__super__.constructor.apply(this, arguments);
      }

      Player.prototype.getPlayerShootingData = function() {
        var ajax, data;
        ajax = NBA.settings.shotChartAjax;
        data = $.extend({}, ajax.data, {
          PlayerID: this.get("PLAYER_ID"),
          TeamID: 0
        });
        return $.ajax({
          type: "GET",
          url: ajax.url,
          data: data,
          contentType: "application/json",
          dataType: "jsonp",
          done: function(json) {
            return console.log("SHOOTING DATA SUCCESS");
          },
          fail: function(err) {
            return console.log(err);
          }
        }).then((function(_this) {
          return function(json) {
            var shots;
            shots = NBA.collectify(json.resultSets[0].headers, json.resultSets[0].rowSet);
            _this.set({
              "SHOTS": new NBA.Collections.Shots(shots)
            });
            console.log("shot:");
            return console.log(shots);
          };
        })(this));
      };

      Player.prototype.getLineups = function() {
        var playerId;
        if (!NBA.bb.lineups.length) {
          return false;
        }
        playerId = this.get("PLAYER_ID");
        return new NBA.Collections.Lineups(NBA.bb.lineups.filter(function(lineup) {
          return lineup.get("PLAYER_IDS").indexOf(playerId) > 0;
        }));
      };

      Player.prototype.getTeam = function() {
        return NBA.bb.teams.findWhere({
          TEAM_ID: this.get("TeamID")
        });
      };

      return Player;

    })(Backbone.Model);
    Players = (function(_super) {
      __extends(Players, _super);

      function Players() {
        return Players.__super__.constructor.apply(this, arguments);
      }

      Players.prototype.model = Player;

      Players.prototype.initialize = function(models) {};

      Players.prototype.byName = function(playerName) {
        return this.findWhere({
          PLAYER: playerName
        });
      };

      Players.prototype.byPlayerId = function(playerId) {
        return this.findWhere({
          PLAYER_ID: playerId
        });
      };

      Players.prototype.byPlayerIdArray = function(playerIdArray, returnCollection) {
        var collection, playerId, results;
        collection = this;
        results = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = playerIdArray.length; _i < _len; _i++) {
            playerId = playerIdArray[_i];
            _results.push(collection.byPlayerId(playerId));
          }
          return _results;
        })();
        if (returnCollection) {
          return new NBA.Collections.Players(results);
        } else {
          return results;
        }
      };

      return Players;

    })(Backbone.Collection);
    Shot = (function(_super) {
      __extends(Shot, _super);

      function Shot() {
        return Shot.__super__.constructor.apply(this, arguments);
      }

      return Shot;

    })(Backbone.Model);
    Shots = (function(_super) {
      __extends(Shots, _super);

      function Shots() {
        return Shots.__super__.constructor.apply(this, arguments);
      }

      Shots.prototype.model = Shot;

      Shots.prototype.initialize = function(models) {};

      return Shots;

    })(Backbone.Collection);
    Team = (function(_super) {
      __extends(Team, _super);

      function Team() {
        return Team.__super__.constructor.apply(this, arguments);
      }

      Team.prototype.initialize = function() {};

      Team.prototype.setPlayers = function() {
        this.set("ROSTER", new NBA.Collections.Players(NBA.bb.players.where({
          TeamID: this.get("TEAM_ID")
        })));
        return this.set("ABBR", this.get("ROSTER").at(0).get("TEAM_ABBREVIATION"));
      };

      Team.prototype.setLineups = function() {
        var team;
        team = this;
        return team.set("LINEUPS", new NBA.Collections.Lineups(NBA.bb.lineups.where({
          TEAM_ABBREVIATION: this.abbr
        })));
      };

      Team.prototype.getTeamShootingData = function() {
        var ajax, data, team;
        team = this;
        ajax = NBA.settings.shotChartAjax;
        data = $.extend(ajax.data, {
          PlayerID: 0,
          TeamID: team.get("TEAM_ID")
        });
        return $.ajax({
          type: "GET",
          url: ajax.url,
          data: data,
          jsonpCallback: "jsonpCallback",
          contentType: "application/json",
          dataType: "jsonp",
          success: function(json) {},
          fail: function(err) {
            return console.log(err);
          }
        }).then(function(json) {
          var playerIds, playerModels, teamShots;
          teamShots = NBA.collectify(json.resultSets[0].headers, json.resultSets[0].rowSet);
          playerIds = _.uniq(_.pluck(teamShots, "PLAYER_ID"));
          playerModels = NBA.bb.players.byPlayerIdArray(playerIds);
          return playerModels.forEach(function(player) {
            return player != null ? player.set("SHOTS", new NBA.Collections.Shots(_.where(teamShots, {
              PLAYER_ID: player.get("PLAYER_ID")
            }))) : void 0;
          });
        });
      };

      return Team;

    })(Backbone.Model);
    Teams = (function(_super) {
      __extends(Teams, _super);

      function Teams() {
        return Teams.__super__.constructor.apply(this, arguments);
      }

      Teams.prototype.model = Team;

      Teams.prototype.initialize = function(models) {};

      Teams.prototype.setAllPlayers = function() {
        return this.each(function(team) {
          return team.setPlayers();
        });
      };

      Teams.prototype.setAllLineups = function() {
        return this.each(function(team) {
          return team.setLineups();
        });
      };

      return Teams;

    })(Backbone.Collection);
    Lineup = (function(_super) {
      __extends(Lineup, _super);

      function Lineup() {
        return Lineup.__super__.constructor.apply(this, arguments);
      }

      Lineup.prototype.initialize = function() {};

      return Lineup;

    })(Backbone.Model);
    Lineups = (function(_super) {
      __extends(Lineups, _super);

      function Lineups() {
        return Lineups.__super__.constructor.apply(this, arguments);
      }

      Lineups.prototype.model = Lineup;

      Lineups.prototype.initialize = function(models) {};

      return Lineups;

    })(Backbone.Collection);
    return {
      Models: {
        Player: Player,
        Shot: Shot,
        Team: Team,
        Lineup: Lineup
      },
      Collections: {
        Players: Players,
        Shots: Shots,
        Teams: Teams,
        Lineups: Lineups
      },
      Views: {},
      Routers: {},
      Hub: new Backbone.Wreqr.EventAggregator(),
      raw: {
        shots: {}
      },
      bb: {
        teams: [],
        players: [],
        lineups: [],
        shots: []
      },
      settings: {
        allTeamsAjax: {
          url: "http://stats.nba.com/stats/leaguedashteamstats",
          callback: "jsonpCallback",
          data: {
            'Season': '2013-14',
            'AllStarSeason': '',
            'SeasonType': 'Regular Season',
            'LeagueID': '00',
            'MeasureType': 'Base',
            'PerMode': 'PerGame',
            'PlusMinus': 'N',
            'PaceAdjust': 'N',
            'Rank': 'N',
            'Outcome': '',
            'Location': '',
            'Month': '0',
            'SeasonSegment': '',
            'DateFrom': '',
            'DateTo': '',
            'OpponentTeamID': '0',
            'VsConference': '',
            'VsDivision': '',
            'GameSegment': '',
            'Period': '0',
            'LastNGames': '0',
            'GameScope': '',
            'PlayerExperience': '',
            'PlayerPosition': '',
            'StarterBench': ''
          }
        },
        eachTeamAjax: {
          url: "http://stats.nba.com/stats/commonteamroster/",
          callback: "jsonpCallback",
          data: {
            'Season': '2013-14',
            'LeagueID': '00',
            'TeamID': ''
          }
        },
        shotChartAjax: {
          url: "http://stats.nba.com/stats/shotchartdetail",
          callback: "jsonpCallback",
          data: {
            'Season': '2013-14',
            'SeasonType': 'Regular Season',
            'LeagueID': '00',
            'TeamID': '0',
            'PlayerID': '0',
            'GameID': '',
            'Outcome': '',
            'Location': '',
            'Month': '0',
            'SeasonSegment': '',
            'DateFrom': '',
            'DateTo': '',
            'OpponentTeamID': '0',
            'VsConference': '',
            'VsDivision': '',
            'Position': '',
            'RookieYear': '',
            'GameSegment': '',
            'Period': '0',
            'LastNGames': '0',
            'ContextFilter': '',
            'ContextMeasure': 'FG_PCT',
            'zone-mode': 'basic'
          }
        },
        lineupAjax: {
          url: "http://stats.nba.com/stats/leaguedashlineups",
          callback: "jsonpCallback",
          data: {
            'Season': '2013-14',
            'SeasonType': 'Regular Season',
            'LeagueID': '00',
            'TeamID': '',
            'MeasureType': 'Base',
            'PerMode': 'PerGame',
            'PlusMinus': 'N',
            'PaceAdjust': 'N',
            'Rank': 'N',
            'Outcome': '',
            'Location': '',
            'Month': '0',
            'SeasonSegment': '',
            'DateFrom': '',
            'DateTo': '',
            'OpponentTeamID': '0',
            'VsConference': '',
            'VsDivision': '',
            'GameSegment': '',
            'Period': '0',
            'LastNGames': '0',
            'GroupQuantity': '5',
            'GameScope': '',
            'PlayerExperience': '',
            'PlayerPosition': '',
            'StarterBench': '',
            'pageNo': '1',
            'rowsPerPage': '0'
          }
        },
        nbaData: [
          {
            url: "http://stats.nba.com/js/data/sportvu/speedData.js",
            varName: "speedData"
          }, {
            url: "http://stats.nba.com/js/data/sportvu/touchesData.js",
            varName: "touchesData"
          }, {
            url: "http://stats.nba.com/js/data/sportvu/passingData.js",
            varName: "passingData"
          }, {
            url: "http://stats.nba.com/js/data/sportvu/defenseData.js",
            varName: "defenseData"
          }, {
            url: "http://stats.nba.com/js/data/sportvu/reboundingData.js",
            varName: "reboundingData"
          }, {
            url: "http://stats.nba.com/js/data/sportvu/drivesData.js",
            varName: "drivesData"
          }, {
            url: "http://stats.nba.com/js/data/sportvu/catchShootData.js",
            varName: "catchShootData"
          }, {
            url: "http://stats.nba.com/js/data/sportvu/pullUpShootData.js",
            varName: "pullUpShootData"
          }, {
            url: "http://stats.nba.com/js/data/sportvu/shootingData.js",
            varName: "shootingData"
          }
        ]
      },
      init: function() {
        NBA.buildHub();
        return NBA.getTeamData();
      },
      setup: function() {
        var actualPlayers, topTen;
        NBA.bb.players = new NBA.Collections.Players(NBA.raw.players);
        NBA.bb.teams.setAllPlayers();
        NBA.bb.teams.setAllLineups();
        actualPlayers = NBA.bb.players.reject(function(p) {
          return !p.get("PTS");
        });
        topTen = _.sortBy(actualPlayers, function(p) {
          return p.get("PTS");
        }).reverse().slice(0, 10).map(function(p) {
          return p.get("PLAYER");
        });
        console.log(topTen);
        window.randomStar = NBA.bb.players.findWhere({
          PLAYER: NBA.pickRandom(topTen)
        });
        return window.randomStar.getPlayerShootingData();
      },
      buildHub: function() {
        return NBA.Hub.on("allTeamDataDone", function(data) {
          responseFlags.allTeams = true;
          console.log("allTeamDataDone");
          return console.log(data);
        }).on("eachTeamDataDone", function(data) {
          return responseFlags.eachTeam = true;
        }).on("playerDataDone", function(data) {
          return responseFlags.players = true;
        }).on("lineupDataDone", function(data) {
          return responseFlags.lineups = true;
        });
      },
      getTeamData: function() {
        var ajax;
        ajax = NBA.settings.allTeamsAjax;
        return $.ajax({
          type: "GET",
          url: ajax.url,
          data: ajax.data,
          jsonpCallback: "jsonpCallback",
          contentType: "application/json",
          dataType: "jsonp"
        }).fail(function(jqXHR, textStatus, errorThrown) {
          console.log("getRosterData( " + teamId + " ) AJAX error:");
          return console.log(errorThrown);
        }).then(function(json) {
          var team, teams;
          teams = NBA.collectify(json.resultSets[0].headers, json.resultSets[0].rowSet);
          NBA.teamLookup = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = teams.length; _i < _len; _i++) {
              team = teams[_i];
              _results.push({
                name: team.TEAM_NAME,
                id: team.TEAM_ID
              });
            }
            return _results;
          })();
          NBA.bb.teams = new NBA.Collections.Teams(teams);
          NBA.Hub.trigger("allTeamDataDone");
          return NBA.getRosterData(NBA.bb.teams.pluck("TEAM_ID"));
        });
      },
      processTeamData: function(data) {
        var team, teams;
        teams = NBA.collectify(data.resultSets[0].headers, data.resultSets[0].rowSet);
        NBA.teamLookup = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = teams.length; _i < _len; _i++) {
            team = teams[_i];
            _results.push({
              name: team.TEAM_NAME,
              id: team.TEAM_ID
            });
          }
          return _results;
        })();
        NBA.bb.teams = new NBA.Collections.Teams(teams);
        return NBA.getRosterData(NBA.bb.teams.pluck("TEAM_ID"));
      },
      getRosterData: function(teamIds) {
        var ajax, rosters, teamId, _i, _len, _results;
        rosters = [];
        ajax = NBA.settings.eachTeamAjax;
        _results = [];
        for (_i = 0, _len = teamIds.length; _i < _len; _i++) {
          teamId = teamIds[_i];
          _results.push((function() {
            return $.ajax({
              type: "GET",
              url: ajax.url,
              data: $.extend({}, ajax.data, {
                TeamID: teamId
              }),
              contentType: "application/json",
              dataType: "jsonp"
            }).fail(function(jqXHR, textStatus, errorThrown) {
              console.log("getRosterData( " + teamId + " ) AJAX error:");
              return console.log(errorThrown);
            }).then(function(json) {
              var roster;
              rosters.push(json);
              if (rosters.length === teamIds.length) {
                NBA.raw.players = _.flatten((function() {
                  var _j, _len1, _results1;
                  _results1 = [];
                  for (_j = 0, _len1 = rosters.length; _j < _len1; _j++) {
                    roster = rosters[_j];
                    _results1.push(NBA.collectify(roster.resultSets[0].headers, roster.resultSets[0].rowSet));
                  }
                  return _results1;
                })());
                return NBA.getDetailedPlayerData();
              }
            });
          })());
        }
        return _results;
      },
      getDetailedPlayerData: function() {
        var cleanData, completedDataRequests, processData;
        completedDataRequests = 0;
        NBA.settings.nbaData.forEach(function(data) {
          return $.getScript(data.url, function(res) {
            completedDataRequests++;
            processData(data.varName);
            if (completedDataRequests === NBA.settings.nbaData.length) {
              cleanData();
              return NBA.getLineups();
            }
          });
        });
        processData = function(varName) {
          var headers;
          headers = window[varName].resultSets[0].headers;
          return window[varName].resultSets[0].rowSet.forEach(function(player) {
            var playerObj, s;
            s = _.object(headers, player);
            s.PLAYER_ID = parseInt(s.PLAYER_ID);
            playerObj = _.findWhere(NBA.raw.players, {
              PLAYER_ID: s.PLAYER_ID
            });
            if (playerObj) {
              return playerObj = _.extend(playerObj, s);
            }
          });
        };
        return cleanData = function() {
          return NBA.raw.players.forEach(function(p) {
            var feet, inches, key, val, _ref;
            _ref = p.HEIGHT.split("-"), feet = _ref[0], inches = _ref[1];
            p.HEIGHT = parseInt(feet) * 12 + parseInt(inches);
            p.BIRTH_DATE = new Date(p.BIRTH_DATE);
            for (key in p) {
              val = p[key];
              if (p.hasOwnProperty(key)) {
                if (!isNaN(parseFloat(val))) {
                  p[key] = parseFloat(val);
                }
              }
            }
          });
        };
      },
      getLineups: function() {
        var ajax, req;
        ajax = NBA.settings.lineupAjax;
        return req = $.ajax({
          type: "GET",
          url: ajax.url,
          data: ajax.data,
          contentType: "application/json",
          dataType: "jsonp",
          success: function(json) {}
        }).fail(function(jqXHR, textStatus, errorThrown) {
          console.log("getLineups() AJAX error:");
          return console.log(errorThrown);
        }).then(function(json) {
          var lineups;
          lineups = NBA.collectify(json.resultSets[0].headers, json.resultSets[0].rowSet);
          lineups.forEach(function(l) {
            var players;
            l.PLAYER_IDS = l.GROUP_ID.split(" - ").map(Number);
            players = l.GROUP_NAME.split(" - ");
            l.PLAYER_NAMES = [];
            return players.forEach(function(p) {
              return l.PLAYER_NAMES.push(p.split(",").reverse().join(" "));
            });
          });
          NBA.bb.lineups = new NBA.Collections.Lineups(lineups);
          return NBA.setup();
        });
      },
      checkFlags: function() {
        return responseFlags;
      },
      collectify: function(headers, arrays) {
        var array, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = arrays.length; _i < _len; _i++) {
          array = arrays[_i];
          _results.push(_.object(headers, array));
        }
        return _results;
      },
      pushArray: function(target, toPush) {
        var el, _i, _len;
        for (_i = 0, _len = toPush.length; _i < _len; _i++) {
          el = toPush[_i];
          target.push(el);
        }
        return target;
      },
      pickRandom: function(array) {
        var index;
        index = Math.floor(Math.random() * array.length);
        if (array.getBackboneClass === "Collection") {
          return array.at(index);
        } else {
          return array[index];
        }
      }
    };
  })();

  $(function() {});

  (function(console) {
    return console.save = function(data, filename) {
      var a, blob, e;
      if (!data) {
        console.error("Console.save: No data");
        return;
      }
      if (!filename) {
        filename = "console.json";
      }
      if (typeof data === "object") {
        data = JSON.stringify(data, undefined, 4);
      }
      blob = new Blob([data], {
        type: "text/json"
      });
      e = document.createEvent("MouseEvents");
      a = document.createElement("a");
      a.download = filename;
      a.href = window.URL.createObjectURL(blob);
      a.dataset.downloadurl = ["text/json", a.download, a.href].join(":");
      e.initMouseEvent("click", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
      return a.dispatchEvent(e);
    };
  })(console);


  /*
  more NBA endpoints to explore:
  http://stats.nba.com/stats/commonallplayers/?LeagueID=00&Season=2013-14&IsOnlyCurrentSeason=1&callback=playerinfocallback
  
  http://stats.nba.com/stats/commonteamyears?LeagueID=00&callback=teaminfocallback
  
  http://stats.nba.com/stats/commonplayerinfo/?PlayerID=201566&SeasonType=Regular+Season&LeagueID=00
  
  http://stats.nba.com/stats/playerdashboardbygeneralsplits?Season=2013-14&SeasonType=Regular+Season&LeagueID=00&PlayerID=201566&MeasureType=Base&PerMode=PerGame&PlusMinus=N&PaceAdjust=N&Rank=N&Outcome=&Location=&Month=0&SeasonSegment=&DateFrom=&DateTo=&OpponentTeamID=0&VsConference=&VsDivision=&GameSegment=&Period=0&LastNGames=0
   */

}).call(this);
